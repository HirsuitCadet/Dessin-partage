import java.io.*;
import java.net.*;
import java.util.*;

public class Serveur {
    private static List<String> shapes = new ArrayList<>();
    private static List<Client> alClients = new ArrayList<String>();

    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(9000);
            System.out.println("Serveur démarré sur le port 9000");

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Nouveau client connecté: " + clientSocket);
                
                Client c = new Client(clientSocket, this.demanderNom(clientSocket););                 
                Thread thread = new Thread(c);
                alClients.add(c.nom)
                thread.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String demanderNom(Socket clientSocket) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            out.println("Veuillez entrer votre nom");
            String nom = in.readLine();
            System.out.println("Nom du client: " + nom);
            while( !this.nomLibre(nom) ){
                out.println("Ce nom est déjà utilisé, veuillez en choisir un autre: ");
                nom = in.readLine();
            }
            return nom;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean nomLibre(String nom){
        for(Client c : alClients){
            if(c.nom.equals(nom)){
                return true;
            }
        }
        return false;
    }

    private static class Client implements Runnable {
        private Socket clientSocket;
        private String nom;

        public Client(Socket clientSocket, String nom) {
            this.clientSocket = clientSocket;
            this.nom = nom;
        }

        public void run() {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

                while (true) {
                    String message = in.readLine();
                    if (message == null) {
                        System.out.println("Client deconnecté: " + clientSocket);
                        return;
                    }
                    commande = this.attendreCommande();
                    switch(commande){
                        case "Dessiner":
                            break;
                        case "retourArriere":
                            break;
                        case "retourAvant":
                            break;
                        case "quitter":
                            clientSocket.close();
                            break;
                        default:
                            out.println("Commande inconnue");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private String attendreCommande(){
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                out.println("Veuillez entrer une commande: ");
                String commande = in.readLine();
                System.out.println("Commande du client: " + commande);
                return commande;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}